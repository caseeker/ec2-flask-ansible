---
- name: Create a VPC
  ec2_vpc:
    state: present
    cidr_block: 172.20.0.0/16
    resource_tags: { "Environment":"Development" }
    region: "{{ region }}"
    subnets:
      - cidr: 172.20.1.0/24
        az: ap-northeast-1a
        resource_tags: { "Environment":"Dev", "Tier" : "Web" }
    internet_gateway: True
    route_tables:
      - subnets:
          - 172.20.1.0/24
        routes:
          - dest: 0.0.0.0/0
            gw: igw
  register: vpc
  when: not vpc_id

- set_fact:
    vpc_id: "{{ vpc.vpc_id }}"
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
  when: not vpc_id

- name: Create Webserver security group
  ec2_group:
    name: flask-webserver
    description: Webserver Security group with port 80 and 22
    region: "{{ region }}"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
  register: ec2_group
  when: not security_group_id

- set_fact:
    security_group_id: "{{ ec2_group.group_id }}"
  when: not security_group_id

- name: Create EC2 key pair
  ec2_key:
    name: webserver-keypair
    region: "{{ region }}"
  register: ec2_key
  when: not private_key

- name: Save private key
  copy:
    content: "{{ ec2_key.key.private_key }}" 
    dest: "{{ playbook_dir }}/aws-private.pem" 
    mode: 0600
  when: ec2_key.changed

- command: "ssh-add {{ playbook_dir }}/aws-private.pem"  
  when: ec2_key.changed

- set_fact:
    private_key: "{{ ec2_key.key.name }}"
  when: not private_key

- name: Launch EC2 instance
  ec2:
     key_name: "{{ private_key }}"
     group_id: "{{ security_group_id }}"
     instance_type: "{{ instance_type }}"
     image: "{{ image }}"
     wait: true
     region: "{{ region }}"
     vpc_subnet_id: "{{ vpc_subnet_id }}"
     assign_public_ip: yes
  register: ec2
  tags: ec2

- name: save captured variables
  template:
    src: captured_vars.yaml.j2
    dest: ./captured_vars.yaml
    mode: 0644

- name: Add new instance to host group
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: launched
  with_items: "{{ ec2.instances }}"
  tags: ec2

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_dns_name }}"
    port: 22
    delay: 20
    timeout: 320
    state: started
  with_items: "{{ ec2.instances }}"
  tags: ec2
